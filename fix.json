// Script ƒë·ªÉ s·ª≠a l·ªói JSON v√† ki·ªÉm tra t√≠nh h·ª£p l·ªá
const fs = require('fs');

function fixJSONFile(filePath) {
    try {
        console.log('üîç Checking JSON file...');
        
        // ƒê·ªçc file nh∆∞ text
        const fileContent = fs.readFileSync(filePath, 'utf8');
        console.log(`üìÑ File size: ${fileContent.length} characters`);
        
        // Ki·ªÉm tra xem c√≥ d·∫•u ph·∫©y th·ª´a kh√¥ng
        const lines = fileContent.split('\n');
        console.log(`üìÑ Total lines: ${lines.length}`);
        
        // T√¨m d·∫•u ph·∫©y th·ª´a ·ªü cu·ªëi object cu·ªëi c√πng
        let fixedContent = fileContent;
        
        // Pattern ƒë·ªÉ t√¨m d·∫•u ph·∫©y th·ª´a tr∆∞·ªõc d·∫•u ]
        const trailingCommaPattern = /,(\s*\]\s*)$/;
        if (trailingCommaPattern.test(fixedContent)) {
            console.log('‚ö†Ô∏è Found trailing comma before closing bracket');
            fixedContent = fixedContent.replace(trailingCommaPattern, '$1');
            console.log('‚úÖ Fixed trailing comma');
        }
        
        // Ki·ªÉm tra xem c√≥ d·∫•u ph·∫©y th·ª´a trong object cu·ªëi c√πng kh√¥ng
        const lastObjectPattern = /,(\s*}\s*,?\s*\]\s*)$/;
        if (lastObjectPattern.test(fixedContent)) {
            console.log('‚ö†Ô∏è Found trailing comma in last object');
            fixedContent = fixedContent.replace(lastObjectPattern, '$1');
            console.log('‚úÖ Fixed trailing comma in last object');
        }
        
        // Th·ª≠ parse JSON
        try {
            const data = JSON.parse(fixedContent);
            console.log(`‚úÖ JSON is valid after fix, records: ${data.length}`);
            
            // N·∫øu c√≥ thay ƒë·ªïi, ghi l·∫°i file
            if (fixedContent !== fileContent) {
                fs.writeFileSync(filePath, fixedContent, 'utf8');
                console.log('üíæ File has been fixed and saved');
            } else {
                console.log('‚úÖ No fixes needed');
            }
            
            return data;
        } catch (parseError) {
            console.log('‚ùå JSON still invalid after fix:', parseError.message);
            return null;
        }
        
    } catch (error) {
        console.log('‚ùå Error reading file:', error.message);
        return null;
    }
}

// Ch·∫°y s·ª≠a l·ªói
console.log('üöÄ Starting JSON fix process...\n');
const data = fixJSONFile('logs/diem_danh_log.json');

if (data) {
    console.log('\nüìä Current data:');
    data.forEach((record, index) => {
        console.log(`${index + 1}. ${record.ten} (${record.mssv}) - ${record.thoiGian}`);
    });
    
    console.log(`\n‚úÖ Total records: ${data.length}`);
} else {
    console.log('\n‚ùå Failed to fix JSON file');
}




