/**
 * CLEANUP MANAGER - QU·∫¢N L√ù T·ª∞ ƒê·ªòNG X√ìA H√åNH ·∫¢NH SAU 48 GI·ªú
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - T·ª± ƒë·ªông x√≥a h√¨nh ·∫£nh ƒëi·ªÉm danh sau 48 gi·ªù
 * - C·∫≠p nh·∫≠t log ƒë·ªÉ x√≥a ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh
 * - Qu·∫£n l√Ω b·ªô nh·ªõ v√† tr√°nh tr√†n dung l∆∞·ª£ng
 * - Ch·∫°y ƒë·ªãnh k·ª≥ m·ªói gi·ªù ƒë·ªÉ ki·ªÉm tra
 * 
 * T√≠nh nƒÉng:
 * - X√≥a file h√¨nh ·∫£nh c≈© h∆°n 48 gi·ªù
 * - C·∫≠p nh·∫≠t diem_danh_log.json
 * - Hi·ªÉn th·ªã ·∫£nh m·∫∑c ƒë·ªãnh trong dashboard
 * - Logging chi ti·∫øt qu√° tr√¨nh cleanup
 * 
 * Dependencies: fs, path, moment
 * Author: Your Name
 * Version: 1.0.0
 */

const fs = require('fs');
const path = require('path');
const moment = require('moment-timezone');

class CleanupManager {
    constructor() {
        this.logPath = path.join(__dirname, '..', 'logs', 'diem_danh_log.json');
        this.uploadsPath = path.join(__dirname, '..', 'uploads');
        this.cleanupInterval = null;
        this.cleanupThresholdHours = 48; // 48 gi·ªù
    }

    /**
     * Kh·ªüi t·∫°o cleanup manager
     */
    async initialize() {
        try {
            console.log('üßπ Kh·ªüi t·∫°o CleanupManager...');
            
            // ƒê·∫£m b·∫£o th∆∞ m·ª•c uploads t·ªìn t·∫°i
            if (!fs.existsSync(this.uploadsPath)) {
                fs.mkdirSync(this.uploadsPath, { recursive: true });
            }
            
            // Ch·∫°y cleanup ngay l·∫≠p t·ª©c
            await this.performCleanup();
            
            // Thi·∫øt l·∫≠p l·ªãch tr√¨nh ch·∫°y m·ªói gi·ªù
            this.startScheduledCleanup();
            
            console.log('‚úÖ CleanupManager ƒë√£ ƒë∆∞·ª£c kh·ªüi t·∫°o');
        } catch (error) {
            console.error('‚ùå L·ªói kh·ªüi t·∫°o CleanupManager:', error);
        }
    }

    /**
     * B·∫Øt ƒë·∫ßu l·ªãch tr√¨nh cleanup t·ª± ƒë·ªông
     */
    startScheduledCleanup() {
        // Ch·∫°y m·ªói gi·ªù (3600000 ms)
        this.cleanupInterval = setInterval(async () => {
            try {
                console.log('üïê Ch·∫°y cleanup t·ª± ƒë·ªông...');
                await this.performCleanup();
            } catch (error) {
                console.error('‚ùå L·ªói trong cleanup t·ª± ƒë·ªông:', error);
            }
        }, 60 * 60 * 1000); // 1 gi·ªù

        console.log('‚è∞ ƒê√£ thi·∫øt l·∫≠p l·ªãch tr√¨nh cleanup m·ªói gi·ªù');
    }

    /**
     * D·ª´ng l·ªãch tr√¨nh cleanup
     */
    stopScheduledCleanup() {
        if (this.cleanupInterval) {
            clearInterval(this.cleanupInterval);
            this.cleanupInterval = null;
            console.log('‚èπÔ∏è ƒê√£ d·ª´ng l·ªãch tr√¨nh cleanup');
        }
    }

    /**
     * Th·ª±c hi·ªán cleanup
     */
    async performCleanup() {
        try {
            console.log('üßπ B·∫Øt ƒë·∫ßu qu√° tr√¨nh cleanup...');
            
            const cutoffTime = moment().subtract(this.cleanupThresholdHours, 'hours');
            console.log(`üìÖ X√≥a d·ªØ li·ªáu c≈© h∆°n: ${cutoffTime.format('YYYY-MM-DD HH:mm:ss')}`);
            
            // ƒê·ªçc log hi·ªán t·∫°i
            const logData = await this.readLogData();
            if (!logData || logData.length === 0) {
                console.log('üìù Kh√¥ng c√≥ d·ªØ li·ªáu log ƒë·ªÉ cleanup');
                return;
            }

            let cleanedCount = 0;
            let updatedLogs = [];

            // X·ª≠ l√Ω t·ª´ng b·∫£n ghi
            for (const record of logData) {
                const recordTime = moment(record.thoiGian, 'YYYY-MM-DD HH:mm:ss');
                
                if (recordTime.isBefore(cutoffTime)) {
                    // B·∫£n ghi c≈© h∆°n 48 gi·ªù
                    if (record.hinhAnh && record.hinhAnh.trim() !== '') {
                        // X√≥a file h√¨nh ·∫£nh
                        const imagePath = path.join(__dirname, '..', record.hinhAnh);
                        await this.deleteImageFile(imagePath);
                        
                        // C·∫≠p nh·∫≠t b·∫£n ghi ƒë·ªÉ x√≥a ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh
                        record.hinhAnh = '';
                        cleanedCount++;
                        
                        console.log(`üóëÔ∏è ƒê√£ x√≥a h√¨nh ·∫£nh cho ${record.mssv} - ${record.ten}`);
                    }
                }
                
                updatedLogs.push(record);
            }

            // L∆∞u log ƒë√£ c·∫≠p nh·∫≠t
            if (cleanedCount > 0) {
                await this.saveLogData(updatedLogs);
                console.log(`‚úÖ Cleanup ho√†n th√†nh: ${cleanedCount} h√¨nh ·∫£nh ƒë√£ ƒë∆∞·ª£c x√≥a`);
            } else {
                console.log('‚úÖ Kh√¥ng c√≥ h√¨nh ·∫£nh n√†o c·∫ßn x√≥a');
            }

        } catch (error) {
            console.error('‚ùå L·ªói trong qu√° tr√¨nh cleanup:', error);
        }
    }

    /**
     * ƒê·ªçc d·ªØ li·ªáu log
     */
    async readLogData() {
        try {
            if (!fs.existsSync(this.logPath)) {
                return [];
            }
            
            const data = fs.readFileSync(this.logPath, 'utf8');
            return JSON.parse(data);
        } catch (error) {
            console.error('‚ùå L·ªói ƒë·ªçc log data:', error);
            return [];
        }
    }

    /**
     * L∆∞u d·ªØ li·ªáu log
     */
    async saveLogData(data) {
        try {
            fs.writeFileSync(this.logPath, JSON.stringify(data, null, 2), 'utf8');
            console.log('üíæ ƒê√£ l∆∞u log data sau cleanup');
        } catch (error) {
            console.error('‚ùå L·ªói l∆∞u log data:', error);
        }
    }

    /**
     * X√≥a file h√¨nh ·∫£nh
     */
    async deleteImageFile(imagePath) {
        try {
            if (fs.existsSync(imagePath)) {
                fs.unlinkSync(imagePath);
                console.log(`üóëÔ∏è ƒê√£ x√≥a file: ${path.basename(imagePath)}`);
                return true;
            }
        } catch (error) {
            console.error(`‚ùå L·ªói x√≥a file ${imagePath}:`, error);
        }
        return false;
    }

    /**
     * Ki·ªÉm tra xem h√¨nh ·∫£nh c√≥ c√≤n h·ª£p l·ªá kh√¥ng (d·ª±a tr√™n th·ªùi gian)
     */
    isImageValid(attendanceTime) {
        if (!attendanceTime) return false;
        
        const recordTime = moment(attendanceTime, 'YYYY-MM-DD HH:mm:ss');
        const cutoffTime = moment().subtract(this.cleanupThresholdHours, 'hours');
        
        return recordTime.isAfter(cutoffTime);
    }

    /**
     * L·∫•y ƒë∆∞·ªùng d·∫´n h√¨nh ·∫£nh m·∫∑c ƒë·ªãnh
     */
    getDefaultImagePath() {
        return '/static/default-avatar.png';
    }

    /**
     * L·∫•y th√¥ng tin cleanup
     */
    getCleanupInfo() {
        return {
            thresholdHours: this.cleanupThresholdHours,
            isRunning: this.cleanupInterval !== null,
            nextCleanup: this.cleanupInterval ? 'M·ªói gi·ªù' : 'Kh√¥ng ch·∫°y'
        };
    }

    /**
     * Ch·∫°y cleanup th·ªß c√¥ng
     */
    async manualCleanup() {
        console.log('üîß Ch·∫°y cleanup th·ªß c√¥ng...');
        await this.performCleanup();
    }
}

module.exports = CleanupManager;
