/**
 * MODULE QU·∫¢N L√ù D·ªÆ LI·ªÜU SINH VI√äN
 * 
 * Ch·ª©c nƒÉng ch√≠nh:
 * - ƒê·ªçc v√† x·ª≠ l√Ω d·ªØ li·ªáu sinh vi√™n t·ª´ file CSV v√† Excel
 * - Validate v√† l√†m s·∫°ch d·ªØ li·ªáu sinh vi√™n
 * - H·ªó tr·ª£ t√¨m ki·∫øm sinh vi√™n theo MSSV ho·∫∑c t√™n
 * - X·ª≠ l√Ω tr∆∞·ªùng h·ª£p d·ªØ li·ªáu thi·∫øu ho·∫∑c kh√¥ng h·ª£p l·ªá
 * - Cung c·∫•p interface ƒë·ªÉ load d·ªØ li·ªáu t·ª´ nhi·ªÅu ngu·ªìn kh√°c nhau
 * 
 * C√°c method ch√≠nh:
 * - loadFromCSV() - ƒê·ªçc d·ªØ li·ªáu t·ª´ file CSV
 * - loadFromExcel() - ƒê·ªçc d·ªØ li·ªáu t·ª´ file Excel
 * - loadStudents() - Load d·ªØ li·ªáu t·ª´ file ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh
 * - findStudentByMSSV() - T√¨m sinh vi√™n theo MSSV
 * - findStudentByName() - T√¨m sinh vi√™n theo t√™n
 * 
 * Dependencies: fs, csv-parser, xlsx
 * Author: Your Name
 * Version: 1.0.0
 */

const fs = require('fs');
const fsPromises = require('fs').promises;
const path = require('path');
const csv = require('csv-parser');
const XLSX = require('xlsx');

class StudentManager {
    constructor() {
        this.csvFile = 'danh_sach_sinh_vien.csv';
        this.excelFile = 'danh_sach_sinh_vien.xlsx';
        this.students = [];
    }

    async initialize() {
        console.log('üîß StudentManager ƒëang kh·ªüi t·∫°o...');
        console.log('üìÅ ƒê∆∞·ªùng d·∫´n hi·ªán t·∫°i:', process.cwd());
        console.log('üìÅ File CSV:', path.resolve(this.csvFile));
        console.log('üìÅ File Excel:', path.resolve(this.excelFile));
        
        await this.loadStudents();
        console.log('‚úÖ StudentManager ƒë√£ kh·ªüi t·∫°o xong');
    }

    async loadStudents() {
        try {
            // Try to load from Excel first
            if (await this.fileExists(this.excelFile)) {
                await this.loadFromExcel();
            } else if (await this.fileExists(this.csvFile)) {
                await this.loadFromCSV();
            } else {
                console.log("Kh√¥ng t√¨m th·∫•y file danh s√°ch sinh vi√™n. T·∫°o file m·∫´u...");
                await this.createSampleCSV();
                this.students = [];
            }
        } catch (error) {
            console.error('L·ªói load students:', error);
            this.students = [];
        }
    }

    async fileExists(filePath) {
        try {
            await fsPromises.access(filePath);
            return true;
        } catch {
            return false;
        }
    }

    async loadFromExcel() {
        try {
            const workbook = XLSX.readFile(this.excelFile);
            const sheetName = workbook.SheetNames[0];
            const worksheet = workbook.Sheets[sheetName];
            const data = XLSX.utils.sheet_to_json(worksheet);

            this.students = [];
            for (const row of data) {
                const mssv = String(row['MSSV'] || '').trim();
                const ten = String(row['T√™n Sinh Vi√™n'] || '').trim();
                
                // B·ªè qua d√≤ng tr·ªëng
                if (!mssv && !ten) {
                    continue;
                }
                
                // B·ªè qua header
                if (mssv === 'MSSV' || ten === 'T√™n Sinh Vi√™n') {
                    continue;
                }
                
                // Ch·∫•p nh·∫≠n sinh vi√™n c√≥ MSSV ho·∫∑c t√™n (ho·∫∑c c·∫£ hai)
                if ((mssv || ten) && mssv !== 'nan' && ten !== 'nan') {
                    // T·∫°o t√™n m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
                    const finalTen = ten || `Sinh vi√™n ${mssv}`;
                    // T·∫°o MSSV m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
                    const finalMssv = mssv || `UNKNOWN_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                    
                    this.students.push({ 
                        mssv: finalMssv, 
                        ten: finalTen 
                    });
                }
            }
            
            console.log(`ƒê√£ load ${this.students.length} sinh vi√™n t·ª´ file Excel`);
        } catch (error) {
            console.error('L·ªói load t·ª´ Excel:', error);
            throw error;
        }
    }

    async loadFromCSV() {
        return new Promise((resolve, reject) => {
            const students = [];
            
            console.log('üìÅ ƒêang load file CSV:', this.csvFile);
            console.log('üìÅ ƒê∆∞·ªùng d·∫´n tuy·ªát ƒë·ªëi:', path.resolve(this.csvFile));
            
            // Ki·ªÉm tra file c√≥ t·ªìn t·∫°i kh√¥ng
            fsPromises.access(this.csvFile)
                .then(() => {
                    console.log('‚úÖ File CSV t·ªìn t·∫°i');
                    
                    fs.createReadStream(this.csvFile)
                        .pipe(csv())
                        .on('data', (row) => {
                            const mssv = String(row['MSSV'] || '').trim();
                            const ten = String(row['T√™n Sinh Vi√™n'] || '').trim();
                            
                            console.log('üìù ƒê·ªçc d√≤ng CSV:', { mssv, ten, raw: row });
                            
                            // Ki·ªÉm tra d√≤ng tr·ªëng ho·∫∑c kh√¥ng h·ª£p l·ªá
                            if (!mssv && !ten) {
                                console.log('‚è≠Ô∏è B·ªè qua d√≤ng tr·ªëng');
                                return;
                            }
                            
                            // B·ªè qua header
                            if (mssv === 'MSSV' || ten === 'T√™n Sinh Vi√™n') {
                                console.log('‚è≠Ô∏è B·ªè qua header');
                                return;
                            }
                            
                            // Ch·∫•p nh·∫≠n sinh vi√™n c√≥ MSSV ho·∫∑c t√™n (ho·∫∑c c·∫£ hai)
                            if ((mssv || ten) && mssv !== 'nan' && ten !== 'nan') {
                                // T·∫°o t√™n m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
                                const finalTen = ten || `Sinh vi√™n ${mssv}`;
                                // T·∫°o MSSV m·∫∑c ƒë·ªãnh n·∫øu thi·∫øu
                                const finalMssv = mssv || `UNKNOWN_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
                                
                                students.push({ 
                                    mssv: finalMssv, 
                                    ten: finalTen 
                                });
                                console.log('‚úÖ ƒê√£ th√™m sinh vi√™n:', { mssv: finalMssv, ten: finalTen });
                            } else {
                                console.log('‚ùå B·ªè qua d√≤ng kh√¥ng h·ª£p l·ªá:', { mssv, ten });
                            }
                        })
                        .on('end', () => {
                            this.students = students;
                            console.log(`‚úÖ ƒê√£ load ${this.students.length} sinh vi√™n t·ª´ file CSV`);
                            console.log('üìä Danh s√°ch sinh vi√™n:', this.students);
                            resolve();
                        })
                        .on('error', (error) => {
                            console.error('‚ùå L·ªói load t·ª´ CSV:', error);
                            reject(error);
                        });
                })
                .catch((error) => {
                    console.error('‚ùå File CSV kh√¥ng t·ªìn t·∫°i:', error.message);
                    console.log('üîß T·∫°o file CSV m·∫´u...');
                    this.createSampleCSV().then(() => {
                        this.students = [];
                        console.log('‚ö†Ô∏è ƒê√£ t·∫°o file CSV m·∫´u, danh s√°ch sinh vi√™n tr·ªëng');
                        resolve();
                    }).catch(reject);
                });
        });
    }

    async createSampleCSV() {
        const sampleData = [
            { 'MSSV': 'SV001', 'T√™n Sinh Vi√™n': 'Nguy·ªÖn VƒÉn A' },
            { 'MSSV': 'SV002', 'T√™n Sinh Vi√™n': 'Tr·∫ßn Th·ªã B' },
            { 'MSSV': 'SV003', 'T√™n Sinh Vi√™n': 'L√™ VƒÉn C' },
            { 'MSSV': 'SV004', 'T√™n Sinh Vi√™n': 'Ph·∫°m Th·ªã D' },
            { 'MSSV': 'SV005', 'T√™n Sinh Vi√™n': 'Ho√†ng VƒÉn E' },
            { 'MSSV': 'SV006', 'T√™n Sinh Vi√™n': 'V≈© Th·ªã F' },
            { 'MSSV': 'SV007', 'T√™n Sinh Vi√™n': 'ƒê·∫∑ng VƒÉn G' },
            { 'MSSV': 'SV008', 'T√™n Sinh Vi√™n': 'B√πi Th·ªã H' },
            { 'MSSV': 'SV009', 'T√™n Sinh Vi√™n': 'Phan VƒÉn I' },
            { 'MSSV': 'SV010', 'T√™n Sinh Vi√™n': 'V√µ Th·ªã K' }
        ];

        try {
            const csvContent = this.convertToCSV(sampleData);
            await fsPromises.writeFile(this.csvFile, csvContent, 'utf8');
            console.log(`ƒê√£ t·∫°o file CSV m·∫´u: ${this.csvFile}`);
        } catch (error) {
            console.error('L·ªói t·∫°o file CSV m·∫´u:', error);
        }
    }

    convertToCSV(data) {
        if (data.length === 0) return '';
        
        const headers = Object.keys(data[0]);
        const csvRows = [headers.join(',')];
        
        for (const row of data) {
            const values = headers.map(header => {
                const value = row[header];
                // Escape commas and quotes
                if (typeof value === 'string' && (value.includes(',') || value.includes('"'))) {
                    return `"${value.replace(/"/g, '""')}"`;
                }
                return value;
            });
            csvRows.push(values.join(','));
        }
        
        return csvRows.join('\n');
    }

    getAllStudents() {
        return this.students;
    }

    getStudentByMSSV(mssv) {
        if (!mssv) return null;
        
        // Debug log
        console.log('üîç T√¨m ki·∫øm MSSV:', mssv);
        console.log('üìä Danh s√°ch sinh vi√™n hi·ªán t·∫°i:', this.students);
        
        // T√¨m ki·∫øm v·ªõi trim v√† case insensitive
        const foundStudent = this.students.find(student => 
            student.mssv && student.mssv.trim().toLowerCase() === mssv.trim().toLowerCase()
        );
        
        console.log('‚úÖ K·∫øt qu·∫£ t√¨m ki·∫øm:', foundStudent);
        return foundStudent;
    }

    async addStudent(mssv, ten) {
        try {
            // Check if student already exists
            if (this.getStudentByMSSV(mssv)) {
                return {
                    success: false,
                    message: 'Sinh vi√™n ƒë√£ t·ªìn t·∫°i'
                };
            }

            this.students.push({ mssv, ten });
            await this.saveToCSV();
            
            return {
                success: true,
                message: 'Th√™m sinh vi√™n th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('L·ªói add student:', error);
            return {
                success: false,
                message: 'L·ªói th√™m sinh vi√™n'
            };
        }
    }

    async updateStudent(mssv, newData) {
        try {
            const studentIndex = this.students.findIndex(s => s.mssv === mssv);
            if (studentIndex === -1) {
                return {
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y sinh vi√™n'
                };
            }

            this.students[studentIndex] = { ...this.students[studentIndex], ...newData };
            await this.saveToCSV();
            
            return {
                success: true,
                message: 'C·∫≠p nh·∫≠t sinh vi√™n th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('L·ªói update student:', error);
            return {
                success: false,
                message: 'L·ªói c·∫≠p nh·∫≠t sinh vi√™n'
            };
        }
    }

    async deleteStudent(mssv) {
        try {
            const studentIndex = this.students.findIndex(s => s.mssv === mssv);
            if (studentIndex === -1) {
                return {
                    success: false,
                    message: 'Kh√¥ng t√¨m th·∫•y sinh vi√™n'
                };
            }

            this.students.splice(studentIndex, 1);
            await this.saveToCSV();
            
            return {
                success: true,
                message: 'X√≥a sinh vi√™n th√†nh c√¥ng'
            };
        } catch (error) {
            console.error('L·ªói delete student:', error);
            return {
                success: false,
                message: 'L·ªói x√≥a sinh vi√™n'
            };
        }
    }

    async saveToCSV() {
        try {
            const csvContent = this.convertToCSV(this.students);
            await fsPromises.writeFile(this.csvFile, csvContent, 'utf8');
            return true;
        } catch (error) {
            console.error('L·ªói save CSV:', error);
            return false;
        }
    }

    async exportToExcel() {
        try {
            const workbook = XLSX.utils.book_new();
            const worksheet = XLSX.utils.json_to_sheet(this.students);
            XLSX.utils.book_append_sheet(workbook, worksheet, 'Danh s√°ch sinh vi√™n');
            
            const excelBuffer = XLSX.write(workbook, { type: 'buffer', bookType: 'xlsx' });
            return excelBuffer;
        } catch (error) {
            console.error('L·ªói export Excel:', error);
            return null;
        }
    }
}

module.exports = StudentManager;
